/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MultipleChoiceProject;
/**
 *
 * @author  Yannick Charbonnier
 */

//import for exeption handling
import java.io.FileNotFoundException;
import java.io.IOException;

//import for creating an ArrayList of Students 
import java.util.Collections;

//imports for the method to write (save) a new file
import java.io.PrintWriter;
import java.io.File;

import java.util.logging.Level;
import java.util.logging.Logger;

//import for a popup to ask user where to sava file
import javax.swing.JFileChooser;
   
/**
   * This class is the main class. It contains the GUI components and NetBeans generated code.
   * It also instantiates the associated ReadStudentFile class.
   *
   * <p>This class also calls other methods from other classes, such as the <tt>readTheLine()</tt> from the ReadStudentFile class.</p>

   * @author  Yan Charbonnier
   * @author  Neal Gafter
   */

public class ExamProcess extends javax.swing.JFrame {

    /**
     * Creates new form ExamProcess
     */
    //constructor - initialises the GUI & components
    public ExamProcess() {
        initComponents();
    }
    

    //instantiate a new ReadStudent object - taking the student answers and correct answer files as arguements. 
    ReadStudentFile readerTEST = new ReadStudentFile("StudentAnswers2.txt", "CorrectAnswers.txt");
   
    //a value to insure that no student is deleted by accident before user has searched for a student. 
    int indexToDelete = 9999;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        showResultsBtn = new javax.swing.JButton();
        addStudentBtn = new javax.swing.JButton();
        textIn = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOut = new javax.swing.JTextArea();
        clearBtn = new javax.swing.JButton();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        jPanel1 = new javax.swing.JPanel();
        searchBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        showResultsBtn.setText("Show Results");
        showResultsBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                showResultsBtnActionPerformed(evt);
            }
        });

        addStudentBtn.setText("Add Student");
        addStudentBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addStudentBtnActionPerformed(evt);
            }
        });

        textIn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                textInActionPerformed(evt);
            }
        });

        txtOut.setColumns(20);
        txtOut.setRows(5);
        txtOut.setAutoscrolls(false);
        jScrollPane1.setViewportView(txtOut);

        clearBtn.setLabel("Clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clearBtnActionPerformed(evt);
            }
        });

        label1.setName(""); // NOI18N
        label1.setText("NOTE | To add student enter as follows: ID, Last Name, First Name, answer1, answer2, (...) answer20 ");

        label2.setName(""); // NOI18N
        label2.setText("To search: enter student ID. You may then delete this student if needed.");

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        searchBtn.setText("Search for Student");
        searchBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                searchBtnActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 0, 0));
        jButton1.setText("Delete this Student");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchBtn)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton2.setText("Save to new File");
        jButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                SaveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(textIn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addStudentBtn))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(showResultsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(clearBtn)))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, 773, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textIn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addStudentBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(showResultsBtn))
                .addGap(21, 21, 21))
        );

        label1.getAccessibleContext().setAccessibleName("NOTE To add student enter as follows: ID, First Name, Last Name, answer1, answer2, (...) answer20 \\n To remove");
        label2.getAccessibleContext().setAccessibleName("To search: enter student ID | To delete a student, search by ID --> then press Delete");
        label2.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void showResultsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showResultsBtnActionPerformed
        
        //using the comparable interface implemented in the Student class to sort the studentCollection by lastName
        Collections.sort(readerTEST.studentCollection); 
        
        //output to a new line
        txtOut.append("\n");
        
        //using a loop to go through the studentCollection ArrayList and output results for each student object
        for(Student s : readerTEST.studentCollection)
        {            
            txtOut.append(s.getFirstName() + " " + s.getLastName() + " obtained a total score of \t" + "" + s.getResult()+ "\n");
        }           
    }//GEN-LAST:event_showResultsBtnActionPerformed

    private void addStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStudentBtnActionPerformed
        
        try
        {   
            //String variables to output to GUI if new student successfully added to list
            String nameAdded ="";
            String idAdded ="";
            
            //a String argument representing the student to be added -> for the readTheLine() method
            String read = textIn.getText();
            
            //checking user input
            if (read.isEmpty())
                txtOut.append("\nPlease enter each comma separated value for a new student object. \nFor more info see the the 'NOTE' section above!");
            else 
            {   
                //take user input (the fields required for a new student object) and pass to readTheLine method in the instantiated ReadStudentFile object 
                readerTEST.readTheLine(read);
                
                //once new student object added to the ArrayList -> calculate its exam results
                readerTEST.calcExamResult();
                
                //clear input field on GUI
                textIn.setText(null);
                
                //output confirmation to the GUI
                if (readerTEST.studentCollection != null && !readerTEST.studentCollection.isEmpty()) 
                {
                    nameAdded = readerTEST.studentCollection.get(readerTEST.studentCollection.size()-1).getFirstName();
                    idAdded = readerTEST.studentCollection.get(readerTEST.studentCollection.size()-1).getStudentId();
                    txtOut.append("\nSuccessfully added " + nameAdded + " (student ID = " + idAdded +" ) to the list of students.");
                }
                
            }
        }
        //handle incorrect input formats 
        catch (ArrayIndexOutOfBoundsException | NumberFormatException e) 
        {
           txtOut.append("\nPlease enter each comma separated value for a new student object. \nFor more info see the the 'NOTE' section above!");
        }       
    }//GEN-LAST:event_addStudentBtnActionPerformed

    private void textInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textInActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textInActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        
        //a String for the studentID input -> to search 
        String search = textIn.getText().toUpperCase();
        
        //an indicator to tell if student was found or not
        boolean found = false;
        
        //a loop to go through each student object in ArrayList and search
        for(Student s : readerTEST.studentCollection)
        {   
            //check that this student object's studentId field matches the one inputted to the GUI 
            if(s.getStudentId()!= null && s.getStudentId().contains(search) && !search.isEmpty())
            {   
                //inform the user that the student was found
                txtOut.append("\n The student with Id: " + search + " is " + s.getFirstName() + " " + s.getLastName() + " and has a score of: " + s.getResult());
                
                //inform the program that the student was found
                found = true;
                
                //the user can then proceed to delete this student -> by pressing 'delete this student button'
                indexToDelete = readerTEST.studentCollection.indexOf(s);
            }
        }
        //output a message to GUI if no corresponding matches found
        if(!found)
            txtOut.append("\nSorry, no student found for that ID\n");
    }//GEN-LAST:event_searchBtnActionPerformed
    
    //a button to clear the GUI output box if desired by the user 
    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        txtOut.setText(null);
    }//GEN-LAST:event_clearBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
            
            //the user needs to 'serach' for student first -> then user can delete the student if found
        
            //declaring Strings to be output to GUI upon successful deletion of student
            String nameDeleted = "";
            String idDeleted = "";
            
            //handle premature pressing of 'delete this student button'
            if(textIn.getText().isEmpty() || indexToDelete == 9999)
                txtOut.append("\nPlease input a correct student number and press 'Search for student'. \nYou'll need to do this first to ensure you have the correct student!");
            else 
            {   
                //assign values to output strings before deleting their corresponding student objects
                nameDeleted = readerTEST.studentCollection.get(indexToDelete).getFirstName();
                idDeleted = readerTEST.studentCollection.get(indexToDelete).getStudentId();
                
                //delete the appropriate student object
                readerTEST.studentCollection.remove(indexToDelete);
                
                //Again: a value to insure that no student is deleted by accident before user has searched for a student. 
                indexToDelete = 9999;
                //output confirmation to GUI
                txtOut.append("\n Success! " + nameDeleted + " (ID: " + idDeleted + " ) was successfully removed from the list of students");
            }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void SaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBtnActionPerformed
        try
        {   
            //method for saving any changes (additions/removals of students) to a new file
            writeNewFile();
        } catch (IOException ex)
        {
            Logger.getLogger(ExamProcess.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_SaveBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExamProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExamProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExamProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExamProcess.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //instantiate this class 
                new ExamProcess().setVisible(true);
            }
        });
    }
        //method for saving any changes (additions/removals of students) to a new file
 
    /**
     *
     * @throws IOException
     */
            public void writeNewFile() throws IOException 
        {   
            //instatiate an API class found in javax.swing to allow user to choose a file location and name to save. 
            JFileChooser fileChooser = new JFileChooser();
            
            //Check if the user selects a file or not: 
            if (fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) 
            {   
                //user location and name inputted by user into the JFileChooser GUI popup
                File file = fileChooser.getSelectedFile();
                
                //instatiate a PritWriter object to write a new file -> an API found in java.io.PrintWriter
                PrintWriter writer = null;
                try {
                    //tell PrintWriter the file name and location chosen by user
                    writer = new PrintWriter(file);
                //exception handling if file not found
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(ExamProcess.class.getName()).log(Level.SEVERE, null, ex);
                }
                //using a loop to go through each student
                for(Student s : readerTEST.studentCollection)
                {   
                    //assigning the student's answers to an array for index access
                    int[] abc = s.getAnswers();
                    
                    //write a line in the file for this student object's fields 
                    writer.println
                                (
                                                s.getStudentId() + "," +
                                                s.getLastName() + "," +
                                                s.getFirstName() + "," +
                                                abc[0] + "," +
                                                abc[1] + "," +
                                                abc[2] + "," +
                                                abc[3] + "," +
                                                abc[4] + "," +
                                                abc[5] + "," +
                                                abc[6] + "," +
                                                abc[7] + "," +
                                                abc[8] + "," +
                                                abc[9] + "," +
                                                abc[10] + "," +
                                                abc[11] + "," +
                                                abc[12] + "," +
                                                abc[13] + "," +
                                                abc[14] + "," +
                                                abc[15] + "," +
                                                abc[16] + "," +
                                                abc[17] + "," +
                                                abc[18] + "," +
                                                abc[19] + ","
                                );

                }
                //stop writing the file and close the PrintWriter bridge to the file -> so that it can now be accessed (and seen by user).
                writer.close();
            } 
        }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addStudentBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton showResultsBtn;
    private javax.swing.JTextField textIn;
    private javax.swing.JTextArea txtOut;
    // End of variables declaration//GEN-END:variables
}
